#include <box2d/box2d.h>
#include <functional>
#include <iostream>
#include <memory>
#include <node.hpp>

namespace bb {
constexpr std::string_view main_font_path{"@MAIN_FONT_PATH@"};
constexpr std::string_view bird_texture_path{"@BIRD_TEXTURE_PATH@"};
} // namespace bb

namespace bb {
std::unique_ptr<sf::RenderWindow> create_window(unsigned w, unsigned h);
std::unique_ptr<sf::Font> load_font(const std::string &f);
std::unique_ptr<sf::Texture> load_texture(const std::string &f);
std::unique_ptr<node_t> build_main_menu(const sf::Vector2u &);
std::unique_ptr<node_t> build_game_scene();
bool initialize();
bool initialize_resources();
bool initialize_gui();
} // namespace bb

namespace bb {
struct resource_g {
  static inline std::unique_ptr<sf::RenderWindow> window;
  static inline std::unique_ptr<sf::Font> main_font{};
  static inline std::unique_ptr<sf::Texture> bird_texture{};
  static inline b2World *world_ptr{};
  static inline b2Body *bird_body{};
};
} // namespace bb

int main() {
  if (!bb::initialize()) {
    std::cerr << "Failed to initialize game!" << std::endl;
    return 1;
  }

  auto start_frame = std::chrono::system_clock::now();
  constexpr double frame_time = 1000.0 / 60.0;
  while (bb::resource_g::window->isOpen()) {
    bb::cmdq_g::update();
    sf::Event event;

    bool update = std::chrono::duration_cast<std::chrono::milliseconds>(
                      std::chrono::system_clock::now() - start_frame)
                      .count() >= frame_time;
    if (update)
      start_frame = std::chrono::system_clock::now();

    while (bb::resource_g::window->pollEvent(event)) {
      if (event.type == sf::Event::KeyPressed &&
          event.key.code == sf::Keyboard::Escape)
        bb::resource_g::window->close();
      if (update)
        bb::cmdq_g::active_scene->listen(event);
    }
    if (update) {
      bb::input_g::update_wall_height(64, bb::resource_g::window->getSize().y);
      bb::input_g::update_mouse_position(*bb::resource_g::window);
      bb::cmdq_g::active_scene->update();
    }

    bb::resource_g::window->clear();
    bb::resource_g::window->draw(*bb::cmdq_g::active_scene);
    bb::resource_g::window->display();
  }

  return 0;
}

namespace bb {
std::unique_ptr<sf::RenderWindow> create_window(unsigned w, unsigned h) {
  return std::unique_ptr<sf::RenderWindow>{new sf::RenderWindow{
      sf::VideoMode{w, h}, "Bouncy Bird", sf::Style::None}};
}
} // namespace bb

namespace bb {
std::unique_ptr<sf::Font> load_font(const std::string &f) {
  std::unique_ptr<sf::Font> ptr{new sf::Font{}};
  if (!ptr->loadFromFile(f))
    return {};
  return ptr;
}
} // namespace bb

namespace bb {
std::unique_ptr<sf::Texture> load_texture(const std::string &f) {
  std::unique_ptr<sf::Texture> ptr{new sf::Texture{}};
  if (!ptr->loadFromFile(f))
    return {};
  return ptr;
}
} // namespace bb

namespace bb {
template <typename T> std::unique_ptr<node_t> create_scene(T *ptr) {
  return std::unique_ptr<node_t>{ptr ? ptr : new node_t{}};
}
std::unique_ptr<node_t> create_scene() {
  return std::unique_ptr<node_t>{new node_t{}};
}
} // namespace bb

namespace bb {
std::unique_ptr<node_t> build_main_menu(const sf::Vector2u &ws) {
  auto root = create_scene();
  std::unique_ptr<node_t> play_button{new button_t{}};
  dynamic_cast<button_t *>(play_button.get())
      ->label("Play", resource_g::main_font.get());
  dynamic_cast<button_t *>(play_button.get())->label_color(sf::Color::White);
  dynamic_cast<button_t *>(play_button.get())->label_size(50);
  dynamic_cast<button_t *>(play_button.get())->on_click([](node_t *) {
    cmdq_g::push(qcmd_t::goto_game);
  });
  constexpr float bw = 150.f, bh = 100.f;
  dynamic_cast<button_t *>(play_button.get())->box_size({bw, bh});
  dynamic_cast<button_t *>(play_button.get())->box_color(sf::Color::Black);
  dynamic_cast<button_t *>(play_button.get())->box_stroke(sf::Color::White, 10);
  dynamic_cast<button_t *>(play_button.get())
      ->box_position({(ws.x - bw) / 2.f, (ws.y - bh) / 2.f});
  dynamic_cast<button_t *>(play_button.get())->label_center();
  root->add(std::move(play_button));
  return root;
}
} // namespace bb

namespace bb {
std::unique_ptr<node_t> build_game_over(const sf::Vector2u &ws) {
  auto root = create_scene();
  std::unique_ptr<node_t> exit_button{new button_t{}};
  dynamic_cast<button_t *>(exit_button.get())
      ->label("Game Over", resource_g::main_font.get());
  dynamic_cast<button_t *>(exit_button.get())->label_color(sf::Color::White);
  dynamic_cast<button_t *>(exit_button.get())->label_size(50);
  dynamic_cast<button_t *>(exit_button.get())->on_click([](node_t *) {
    resource_g::window->close();
  });
  constexpr float bw = 400.f, bh = 100.f;
  dynamic_cast<button_t *>(exit_button.get())->box_size({bw, bh});
  dynamic_cast<button_t *>(exit_button.get())->box_color(sf::Color::Black);
  dynamic_cast<button_t *>(exit_button.get())->box_stroke(sf::Color::White, 10);
  dynamic_cast<button_t *>(exit_button.get())
      ->box_position({(ws.x - bw) / 2.f, (ws.y - bh) / 2.f});
  dynamic_cast<button_t *>(exit_button.get())->label_center();
  root->add(std::move(exit_button));
  return root;
}
} // namespace bb

namespace bb {
bool initialize_resources() {
  bb::resource_g::main_font = bb::load_font(bb::main_font_path.data());
  if (!bb::resource_g::main_font) {
    std::cerr << "Failed to load the main font!" << std::endl;
    return false;
  }
  bb::resource_g::bird_texture = bb::load_texture(bb::bird_texture_path.data());
  if (!bb::resource_g::bird_texture) {
    std::cerr << "Failed to load the bird texture!" << std::endl;
    return false;
  }
  return true;
}
} // namespace bb

namespace bb {
bool initialize() {
  if (!bb::initialize_resources()) {
    std::cerr << "Failed to initialize game resources!" << std::endl;
    return false;
  }

  if (!bb::initialize_gui()) {
    std::cerr << "Failed to initialize game GUI!" << std::endl;
    return false;
  }
  return true;
}
} // namespace bb

namespace bb {
bool initialize_gui() {
  try {
    resource_g::window = bb::create_window(640, 480);

    bb::cmdq_g::menu_scene = bb::build_main_menu(resource_g::window->getSize());
    bb::cmdq_g::push(bb::qcmd_t::goto_main_menu);

    bb::cmdq_g::game_scene = bb::build_game_scene();
    bb::cmdq_g::game_over = bb::build_game_over(resource_g::window->getSize());
  } catch (...) {
    return false;
  }
  return true;
}
} // namespace bb

namespace bb {
std::unique_ptr<node_t> build_game_scene() {
  // Setting up the physics
  game_t *game = new game_t{};
  auto root = create_scene(game);
  game->initialize_world(-0.05);
  game->step_parameters(1.0 / 60.0, 2.0, 2.0);
  resource_g::world_ptr = game->world();

  b2BodyDef bird_def{};
  bird_def.position.Set(0.f, 0.f);
  bird_def.type = b2_dynamicBody;
  resource_g::bird_body = resource_g::world_ptr->CreateBody(&bird_def);
  b2PolygonShape bird_bounds{};
  bird_bounds.SetAsBox(1.f, 1.f);
  resource_g::bird_body->CreateFixture(&bird_bounds, 1.f);

  // Setting up the scene graph
  auto bird_ptr = new bird_t{};
  bird_ptr->texture(resource_g::bird_texture.get(), {0, 160}, 160, 8);
  bird_ptr->scale(-0.4f, 0.4f);
  bird_ptr->position(320, 240);
  bird_ptr->flap_freq(100);
  bird_ptr->phy_body(resource_g::bird_body);
  game->add(std::unique_ptr<node_t>{bird_ptr});

  auto floor_ptr = new plat_t{};
  game->add(std::unique_ptr<node_t>{floor_ptr});
  floor_ptr->box()->setPosition(0, 0);
  floor_ptr->box()->setSize(sf::Vector2f{640, 10});
  floor_ptr->box()->setFillColor(sf::Color::Magenta);
  floor_ptr->target(bird_ptr);

  auto ceiling_ptr = new plat_t{};
  game->add(std::unique_ptr<node_t>{ceiling_ptr});
  ceiling_ptr->box()->setPosition(0, 470);
  ceiling_ptr->box()->setSize(sf::Vector2f{640, 10});
  ceiling_ptr->box()->setFillColor(sf::Color::Magenta);
  ceiling_ptr->target(bird_ptr);

  input_g::update_wall_height(64, 480);

  auto top_wall = new wall_t{};
  game->add(std::unique_ptr<node_t>{top_wall});
  sf::Vector2f topw_spawn{700, 0};
  top_wall->box()->setPosition(topw_spawn);
  top_wall->spawn_point(topw_spawn);
  top_wall->box()->setSize(sf::Vector2f{20, input_g::top_wall_height()});
  top_wall->teleport_boundry(-10);
  top_wall->step_size(2);
  top_wall->box()->setFillColor(sf::Color::Magenta);
  top_wall->target(bird_ptr);
  top_wall->invert(false);

  auto bottom_wall = new wall_t{};
  game->add(std::unique_ptr<node_t>{bottom_wall});
  sf::Vector2f botw_spawn{700, 480};
  bottom_wall->box()->setPosition(botw_spawn.x, botw_spawn.y - 50);
  bottom_wall->box()->setSize(sf::Vector2f{20, input_g::bottom_wall_height()});
  bottom_wall->box()->setFillColor(sf::Color::Magenta);
  bottom_wall->spawn_point(botw_spawn);
  bottom_wall->teleport_boundry(-10);
  bottom_wall->step_size(2);
  bottom_wall->target(bird_ptr);
  bottom_wall->update_boundry(resource_g::window->getSize().x);
  bottom_wall->invert(true);

  return root;
}
} // namespace bb
